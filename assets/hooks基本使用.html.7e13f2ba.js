import{_ as e,r as p,o,c,a as n,b as a,d as i,e as s}from"./app.ebc37b2a.js";const l={},u=s('<h2 id="hooks是什么" tabindex="-1"><a class="header-anchor" href="#hooks是什么" aria-hidden="true">#</a> Hooks是什么？</h2><p><strong>目标</strong>：能够说出 React Hooks是什么？</p><p><strong>内容</strong>：</p><ul><li><code>Hooks</code>：钩子、钓钩、钩住</li><li><code>Hooks</code> 是 <strong>React v16.8</strong> 中的新增功能</li><li>作用：为<strong>函数组件</strong>提供状态、生命周期等原本 class 组件中提供的 React 功能 <ul><li>可以理解为通过 Hooks 为函数组件钩入 class 组件的特性</li></ul></li><li>注意：<span style="color:red;"><strong>Hooks 只能在函数组件中使用</strong></span>，自此，函数组件成为 React 的新宠儿</li></ul><p>React v16.8 版本前后，组件开发模式的对比：</p><ul><li>React v16.8 以前： class 组件(提供状态) + 函数组件(展示内容)</li><li>React v16.8 及其以后： <ol><li>class 组件(提供状态) + 函数组件(展示内容)</li><li>Hooks(提供状态) + 函数组件(展示内容)</li><li>混用以上两种方式：部分功能用 class 组件，部分功能用 Hooks+函数组件</li></ol></li></ul><p><strong>总结</strong>：</p><p>注意1：虽然有了 Hooks，但 <em>React 官方并没有计划从 React 库中移除 class</em></p><p>注意2：有了 Hooks 以后，不能再把<strong>函数组件</strong>称为<s>无状态组件</s>了，因为 Hooks 为函数组件提供了状态</p><h2 id="为什么要有-hooks" tabindex="-1"><a class="header-anchor" href="#为什么要有-hooks" aria-hidden="true">#</a> 为什么要有 Hooks</h2><p><strong>目标</strong>：能够说出为什么要有 Hooks 以及 Hooks 能解决什么问题</p><p><strong>内容</strong>：</p><p>两个角度：1 组件的状态逻辑复用 2 class 组件自身的问题</p><ol><li><p>组件的状态逻辑复用：</p><ul><li>在 Hooks 之前，组件的状态逻辑复用经历了：mixins（混入）、HOCs（高阶组件）、render-props 等模式</li><li>（早已废弃）mixins 的问题：1 数据来源不清晰 2 命名冲突</li><li>HOCs、render-props 的问题：重构组件结构，导致组件形成 JSX 嵌套地狱问题</li></ul></li><li><p>class 组件自身的问题：</p><ul><li>选择：函数组件和 class 组件之间的区别以及使用哪种组件更合适</li><li>需要理解 class 中的 this 是如何工作的</li><li>相互关联且需要对照修改的代码被拆分到不同生命周期函数中</li></ul></li></ol><ul><li>相比于函数组件来说，不利于代码压缩和优化，也不利于 TS 的类型推导</li></ul><p><strong>总结</strong>：</p><p>正是由于 React 原来存在的这些问题，才有了 Hooks 来解决这些问题</p><h3 id="前面学习的-react-知识是有用的" tabindex="-1"><a class="header-anchor" href="#前面学习的-react-知识是有用的" aria-hidden="true">#</a> 前面学习的 React 知识是有用的</h3><p>class 组件相关的 API 不用了，比如：</p><ul><li><code>class Hello extends Component</code></li><li><code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code></li><li><code>this</code> 相关的用法</li></ul><p>原来学习的内容还是要用的，比如：</p><ul><li>JSX：<code>{}</code>、<code>onClick={handleClick}</code>、条件渲染、列表渲染、样式处理等</li><li>组件：函数组件、组件通讯</li><li>路由</li><li>React 开发理念：<code>单向数据流</code>、<code>状态提升</code> 等</li><li>解决问题的思路、技巧、常见错误的分析等上</li></ul><h2 id="hooks渐进策略" tabindex="-1"><a class="header-anchor" href="#hooks渐进策略" aria-hidden="true">#</a> hooks渐进策略</h2><p><strong>目标</strong>：能够理解在react中什么场景应该使用hooks</p><p><strong>内容</strong>：</p>',25),r={href:"https://zh-hans.reactjs.org/docs/hooks-intro.html",target:"_blank",rel:"noopener noreferrer"},d=s("<li>Hooks 和现有代码可以同时工作，你可以渐进式地使用他们 <ul><li>不推荐直接使用 Hooks 大规模重构现有组件</li><li>推荐：新功能用 Hooks，复杂功能实现不了的，也可以继续用 class</li><li>找一个功能简单、非核心功能的组件开始使用 hooks</li></ul></li><li>之前的react语法并不是以后就不用了 <ul><li>class 组件相关的 API 在hooks中可以不用 <ul><li>class 自身语法，比如，constructor、static 等</li><li>钩子函数，<code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code></li><li><code>this</code> 相关的用法</li></ul></li><li><strong>原来学习的 React 内容还是要用的</strong><ul><li>JSX：<code>{}</code>、<code>onClick={handleClick}</code>、条件渲染、列表渲染、样式处理等</li><li>组件：函数组件、组件通讯</li><li>React 开发理念：<code>单向数据流</code>、<code>状态提升</code> 等</li><li>解决问题的思路、技巧、常见错误的分析等</li></ul></li></ul></li>",2),k=s(`<p><strong>总结</strong>：</p><ol><li>react没有计划从React中移除class</li><li>react将继续为 class 组件提供支持</li><li>可以在项目中同时使用hooks和class</li></ol><h2 id="知识点补充-使用数组解构简化" tabindex="-1"><a class="header-anchor" href="#知识点补充-使用数组解构简化" aria-hidden="true">#</a> 知识点补充-使用数组解构简化</h2><p>比如，要获取数组中的元素：</p><ol><li>原始方式：索引访问</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// 获取索引为 0 的元素</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// 获取索引为 1 的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>简化方式：数组解构 <ul><li>相当于创建了两个变量（可以是任意的变量名称）分别获取到对应索引的数组元素</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr
<span class="token comment">// a =&gt; arr[0]</span>
<span class="token comment">// b =&gt; arr[1]</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> arr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usestate-hook" tabindex="-1"><a class="header-anchor" href="#usestate-hook" aria-hidden="true">#</a> useState Hook</h2><h3 id="usestate-hook-的基本使用" tabindex="-1"><a class="header-anchor" href="#usestate-hook-的基本使用" aria-hidden="true">#</a> useState Hook 的基本使用</h3><ul><li>使用场景：当你想要在<strong>函数组件中，使用组件状态时</strong>，就要使用 <strong>useState</strong> Hook 了</li><li>作用：为函数组件提供状态（state）</li><li>使用步骤： <ol><li>导入 <code>useState</code> 函数</li><li>调用 <code>useState</code> 函数，并传入状态的初始值</li><li>从 <code>useState</code> 函数的返回值中，拿到状态和修改状态的函数</li><li>在 JSX 中展示状态</li><li>在按钮的点击事件中调用修改状态的函数，来更新状态</li></ol></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回值是一个数组</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 展示状态值 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">useState Hook -&gt; </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 点击按钮，让状态值 +1 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">//class 写法</span>
<span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">handleChangeCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeCount<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点击改变count</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数：<strong>状态初始值</strong>。比如，传入 0 表示该状态的初始值为 0 <ul><li>注意：此处的状态可以是任意值（比如，数值、字符串等），而 class 组件中的 state 必须是对象</li></ul></li><li>返回值：数组，包含两个值：1 状态值（state） 2 修改该状态的函数（setState）</li></ul><h3 id="使用usestate组件的更新过程" tabindex="-1"><a class="header-anchor" href="#使用usestate组件的更新过程" aria-hidden="true">#</a> 使用useState组件的更新过程</h3><p>函数组件使用 <strong>useState</strong> hook 后的执行过程，以及状态值的变化：</p><ul><li><p>组件第一次渲染：</p><ol><li>从头开始执行该组件中的代码逻辑</li><li>调用 <code>useState(0)</code> 将传入的参数作为状态初始值，即：0</li><li>渲染组件，此时，获取到的状态 count 值为： 0</li></ol></li><li><p>组件第二次渲染：</p><ol><li>点击按钮，调用 <code>setCount(count + 1)</code> 修改状态，因为状态发生改变，所以，该组件会重新渲染</li><li>组件重新渲染时，会再次执行该组件中的代码逻辑</li><li>再次调用 <code>useState(0)</code>，此时 <strong>React 内部会拿到最新的状态值而非初始值</strong>，比如，该案例中最新的状态值为 1</li><li>再次渲染组件，此时，获取到的状态 count 值为：1</li></ol></li></ul><p>注意：<strong>useState 的初始值(参数)只会在组件第一次渲染时生效</strong>。</p><p>也就是说，以后的每次渲染，useState 获取到都是最新的状态值。React 组件会记住每次最新的状态值!</p><h3 id="为函数组件添加多个状态" tabindex="-1"><a class="header-anchor" href="#为函数组件添加多个状态" aria-hidden="true">#</a> 为函数组件添加多个状态</h3><p>问题：如果一个函数组件需要多个状态，该如何处理? 回答：调用 <code>useState</code> Hook 多次即可，每调用一次 useState Hook 可以提供一个状态。 注意：useState Hook 多次调用返回的 [state, setState] 相互之间，互不影响。</p><ul><li>使用数组解构简化 <code>useState</code> 的使用 <ul><li>约定：<strong>修改状态的函数名称以 set 开头，后面跟上状态的名称</strong></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解构出来的名称可以是任意名称</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态的读取和修改" tabindex="-1"><a class="header-anchor" href="#状态的读取和修改" aria-hidden="true">#</a> 状态的读取和修改</h3><p>状态的使用：1 读取状态 2 修改状态</p><ol><li><p>读取状态：该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用</p></li><li><p>修改状态：</p></li></ol><ul><li><code>setCount(newValue)</code> 是一个函数，参数表示：<strong>新的状态值</strong></li><li>调用该函数后，将<strong>使用新的状态值<code>替换</code>旧值</strong></li><li>修改状态后，因为状态发生了改变，所以，该组件会重新渲染</li></ul><h3 id="hooks-的使用规则" tabindex="-1"><a class="header-anchor" href="#hooks-的使用规则" aria-hidden="true">#</a> hooks 的使用规则</h3><p>注意：<strong>React Hooks 只能直接出现在 函数组件 中，不能嵌套在 if/for/其他普通函数中</strong>！</p><p>否则就会报错：React Hook &quot;useState&quot; is called conditionally. React Hooks must be called in the exact same order in every component render</p><p>React 的 useState 这个 Hook 被条件性（放在一个条件判断中）的调用了。</p><p>React Hooks 必须要每次组件渲染时，按照<strong>相同的顺序</strong>来调用所有的 Hooks。</p><ul><li>为什么会有这样的规则？ 因为 React 是按照 Hooks 的调用顺序来识别每一个 Hook，如果每次调用的顺序不同，导致 React 无法知道是哪一个 Hook</li></ul><p>三个限制总结：</p><ol><li>不能在if else语句中使用hooks</li><li>不能在for语句中使用hooks</li><li>不能在普通函数中使用hooks</li></ol><p>什么是React中的特殊函数：</p><ol><li>函数式组价</li><li>useXxx命名的自定义hooks函数</li></ol><h3 id="受控组件-hooks" tabindex="-1"><a class="header-anchor" href="#受控组件-hooks" aria-hidden="true">#</a> 受控组件-hooks</h3><ol><li>state控制value或者checked</li><li>onChange 和setState</li></ol><h2 id="useeffect-hook" tabindex="-1"><a class="header-anchor" href="#useeffect-hook" aria-hidden="true">#</a> useEffect Hook</h2><ol><li>side effect - 副作用</li><li>useEffect 的基本使用</li><li>useEffect 的依赖</li><li>useEffect 发送请求</li></ol><h3 id="side-effect-副作用" tabindex="-1"><a class="header-anchor" href="#side-effect-副作用" aria-hidden="true">#</a> side effect - 副作用</h3><p>使用场景：当你想要在函数组件中，<strong>处理副作用（side effect）时</strong>，就要使用 <strong>useEffect</strong> Hook 了 作用：<strong>处理函数组件中的副作用（side effect）</strong></p><p>问题：副作用（side effect）是什么? 回答：在计算机科学中，如果一个函数或其他操作修改了其局部环境之外的状态变量值，那么它就被称为有副作用 类比，对于 999 感冒灵感冒药来说：</p><ul><li>（<strong>主</strong>）作用：用于感冒引起的头痛，发热，鼻塞，流涕，咽痛等</li><li>副作用：可见困倦、嗜睡、口渴、虚弱感</li></ul><p>理解：副作用是相对于主作用来说的，一个功能（比如，函数）除了主作用，其他的作用就是副作用 对于 React 组件来说，<strong>主作用就是根据数据（state/props）渲染 UI</strong>，除此之外都是副作用（比如，手动修改 DOM）</p><p>React 组件的公式：<strong>UI = f(state)</strong></p><p>常见的副作用（side effect）</p><ul><li>数据（Ajax）请求、手动修改 DOM、localStorage 操作等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不带副作用的情况：</span>
<span class="token comment">// 该函数的（主）作用：计算两个数的和</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">// 带副作用的情况：</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 因为此处修改函数外部的变量值，而这一点不是该函数的主作用，因此，就是：side effect（副作用）</span>
  c <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">// 带副作用的情况：</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 因为 console.log 会导致控制台打印内容，所以，也是对外部产生影响，所以，也是：副作用</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">// 没有副作用：</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 纯函数：固定输入、固定输出</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>name 
<span class="token punctuation">}</span>

<span class="token comment">// 有副作用：</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处直接修改了参数的值，也是一个副作用</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;大飞哥&#39;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小马哥&#39;</span> <span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect-的基本使用" tabindex="-1"><a class="header-anchor" href="#useeffect-的基本使用" aria-hidden="true">#</a> useEffect 的基本使用</h3><p>使用场景：当你想要在函数组件中，处理副作用（side effect）时，就要使用 useEffect Hook 了</p><p>作用：处理函数组件中的副作用（side effect） 注意：在实际开发中，副作用是不可避免的。因此，react 专门提供了 <strong>useEffect</strong> Hook <strong>来处理函数组件中的副作用</strong></p><p><code>useEffect</code> Hook 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前已点击 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前已点击 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>参数：回调函数（称为 <strong>effect</strong>），就是<strong>在该函数中写副作用代码</strong></li><li>执行时机：该 effect 会在每次组件更新（DOM更新）后执行</li></ul><h3 id="useeffect-的依赖" tabindex="-1"><a class="header-anchor" href="#useeffect-的依赖" aria-hidden="true">#</a> useEffect 的依赖</h3><ul><li>问题：如果组件中有另外一个状态，另一个状态更新时，刚刚的 effect 回调，也会执行</li></ul><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>import React, { useEffect, useState } from &#39;react&#39;;

export default function App() {
  const [count, setCount] = useState(0);
  const [msg, setMsg] = useState(&#39;&#39;);

  //  调用useEffect  （state变化时，useEffect会自动执行）
  useEffect(() =&gt; {
    console.log(&#39;userEffect执行了&#39;);
    document.title = count;
  });

  return (
    &lt;div&gt;
      &lt;button onClick={() =&gt; setMsg(msg + &#39;!&#39;)}&gt;点我修改Msg&lt;/button&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;点我count+1&lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>性能优化：<strong>跳过不必要的执行，只在 count 变化时，才执行相应的 effect</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前已点击 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>第二个参数：可选的，可省略；也可以传一个数组，数组中的元素可以成为依赖项（deps）</li><li>该示例中表示：只有当 count 改变时，才会重新执行该 effect</li></ul><h3 id="useeffect-的依赖是一个空数组" tabindex="-1"><a class="header-anchor" href="#useeffect-的依赖是一个空数组" aria-hidden="true">#</a> useEffect 的依赖是一个空数组</h3><p>useEffect 的第二个参数，还可以是一个<strong>空数组（[]）</strong>，表示只在组件第一次渲染后执行 effect 使用场景：1 事件绑定 2 发送请求获取数据 等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>该 effect 只会在组件第一次渲染后执行，因此，可以执行像事件绑定等只需要执行一次的操作 <ul><li>此时，相当于 class 组件的 componentDidMount 钩子函数的作用</li></ul></li><li>跟 useState Hook 一样，一个组件中也可以调用 useEffect Hook 多次</li><li>推荐：一个 useEffect 只处理一个功能，有多个功能时，使用多次 useEffect</li></ul><h3 id="🔔小结-useeffect-两个参数使用" tabindex="-1"><a class="header-anchor" href="#🔔小结-useeffect-两个参数使用" aria-hidden="true">#</a> 🔔小结 useEffect 两个参数使用</h3><ul><li>useEffect 第一个参数为必传参数。</li><li>useEffect 第二个可选参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 触发时机：1 挂载时执行 2 每次组件重新渲染都会再次执行（不常用，会造成页面卡顿）</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 触发时机：1.只在挂载时执行一次  😊 等同于在componentDidMount中调用回调函数</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 触发时机：1 挂载时会执行 2 当 count 变化时会再次执行 😊 等同于在componentDidMount 和 componentDidUpdate两个钩子函数中调用</span>
<span class="token comment">// 类似vue中侦听器，可以监测数据的变化。</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect可以监听多个状态" tabindex="-1"><a class="header-anchor" href="#useeffect可以监听多个状态" aria-hidden="true">#</a> useEffect可以监听多个状态</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code> // 1、第一种写法：分开监听
   useEffect(() =&gt; {
     console.log(&#39;每次拿到最新的count&#39;, count);
   }, [count]);

  useEffect(() =&gt; {
     console.log(&#39;每次拿到最新的count2&#39;, count2);
  }, [count2]);

  // 2. 第二种写法：数组内写多个变量
  useEffect(() =&gt; {
    console.log(&#39;每次拿到最新的count 和 count2&#39;, count + count2);
  }, [count, count2]);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect-组件卸载时" tabindex="-1"><a class="header-anchor" href="#useeffect-组件卸载时" aria-hidden="true">#</a> useEffect 组件卸载时</h3><p>问题：如何在组件卸载时，解绑事件？此时，就用到 effect 的返回值了</p><p>静态结构：复制即可</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>import React, {  useState } from &#39;react&#39;;

export default function App() {
  // 准备组件的显示与隐藏
  const [isShow, setIsShow] = useState(true);
  return (
    &lt;div&gt;
      {isShow &amp;&amp; &lt;Child /&gt;}
      &lt;button onClick={() =&gt; setIsShow(!isShow)}&gt;点击卸载子组件&lt;/button&gt;
    &lt;/div&gt;
  );
}

function Child() {
  // 在子组件中挂载时监听窗口改变事件
  
  return &lt;div&gt;我是子组件&lt;/div&gt;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
   <span class="token comment">// 等同于在componentWillUnMount里调用返回函数</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li><p>effect 的返回值也是可选的，可省略。也可以返回一个清理函数，用来执行事件解绑等清理操作</p></li><li><p>清理函数的执行时机：</p><ul><li><p>1【空数组没有依赖】组件卸载时</p><ul><li>此时，相当于 class 组件的 componentWillUnmount 钩子函数的作用</li></ul></li><li><p>2 【有依赖项】effect 重新执行前（暂时知道即可）</p></li></ul></li><li><p>推荐：一个 useEffect 只处理一个功能，有多个功能时，使用多次 useEffect</p></li><li><p>优势：</p><ul><li>根据业务逻辑来拆分，相同功能的业务逻辑放在一起，而不是根据生命周期方法名称来拆分代码</li><li>编写代码时，关注点集中；而不是上下翻滚来查看代码</li></ul></li></ul><h3 id="useeffect-挂载和卸载清理综合写法" tabindex="-1"><a class="header-anchor" href="#useeffect-挂载和卸载清理综合写法" aria-hidden="true">#</a> useEffect 挂载和卸载清理综合写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timerId <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;一秒时间到，爆炸&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;浏览器窗口被调整了&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect-发送请求" tabindex="-1"><a class="header-anchor" href="#useeffect-发送请求" aria-hidden="true">#</a> useEffect 发送请求</h3><p>准备工作：</p><ol><li>安装<code>axios</code>。</li><li>准备<code>utils/request.js</code></li><li>可能需要重启项目。</li></ol><p>在组件中，使用 useEffect Hook 发送请求获取数据（side effect）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✅正确写法</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  	<span class="token keyword">await</span> <span class="token operator">...</span>
  
  <span class="token punctuation">}</span>
  <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// ❌错误演示：</span>
<span class="token comment">// 不要给 useEffect 第一级函数添加 async</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>注意：<strong>useEffect 只能是一个同步函数，不能使用 async</strong></li><li>因为 effect 的返回值应该是一个清理函数，React 会在组件卸载或者 effect 的依赖项变化时重新执行</li><li>但如果 effect 是 async 的，此时返回值是 Promise 对象。这样的话，就无法保证清理函数被立即调用</li><li>如果延迟调用清理函数，也就没有机会忽略过时的请求结果或取消请求</li><li><strong>为了使用 async/await 语法，可以在 useEffect 内部或外部创建 async 函数，并调用</strong></li></ul><h2 id="todo案例-hooks版" tabindex="-1"><a class="header-anchor" href="#todo案例-hooks版" aria-hidden="true">#</a> Todo案例-hooks版</h2><ol><li>拆分函数式组件</li><li>列表数据定义和渲染</li><li>根据id删除一条数据</li><li>根据id更新完成状态isDone</li><li>清除已完成</li><li>统计剩余未完成的数量</li><li>切换按钮点击高亮</li><li>切换按钮点击显示不同的数据</li><li>受控组件和新增数据</li><li>小选影响全选</li><li>全选影响小选</li><li>数据缓存</li></ol><h3 id="useeffect-踩坑注意" tabindex="-1"><a class="header-anchor" href="#useeffect-踩坑注意" aria-hidden="true">#</a> useEffect 踩坑注意</h3><ol><li>useEffect 第二个参数，需要先声明依赖数据。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ❌错误写法，type 和 list 还没创建，无法使用</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据更新时 - 设置本地存储数据&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> type<span class="token punctuation">]</span><span class="token punctuation">)</span>  
  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>type<span class="token punctuation">,</span> setType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>书写多个 useEffect 时，注意先后书写顺序。(先书写组件挂载时，再书写组件更新时)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 数据更新时 - 设置本地存储数据</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;todos-type&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> type<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// ❌错误写法：组件挂载时应该要写在更新时前面。</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;todos-type&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;all&#39;</span>
    <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
    <span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97);function v(m,b){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[a("react没有计划从React中移除 class "),n("a",r,[a("文档"),i(t)])]),d]),k])}const g=e(l,[["render",v],["__file","hooks基本使用.html.vue"]]);export{g as default};
