import{_ as i,r,o as a,c as d,a as t,b as o,d as n,e}from"./app.441515f3.js";const s="/assets/组件生命周期.ebd49be1.png",h="/assets/组件的执行顺序.539fde08.png",p="/assets/更新阶段.302093bb.png",c={},_=e('<h1 id="组件的生命周期" tabindex="-1"><a class="header-anchor" href="#组件的生命周期" aria-hidden="true">#</a> 组件的生命周期 -</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><ul><li>意义：组件的生命周期有助于理解组件的运行方式、完成更复杂的组件功能、分析组件错误原因等</li><li>组件的生命周期：组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</li><li>钩子函数的作用：为开发人员在不同阶段操作组件提供了时机。</li><li><strong>只有 类组件 才有生命周期。</strong></li></ul><h2 id="生命周期的整体说明" tabindex="-1"><a class="header-anchor" href="#生命周期的整体说明" aria-hidden="true">#</a> 生命周期的整体说明</h2>',4),u=t("li",null,"每个阶段的执行时机",-1),b=t("li",null,"每个阶段钩子函数的执行顺序",-1),m=t("li",null,"每个阶段钩子函数的作用",-1),f={href:"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"},g=e('<p><img src="'+s+'" alt=""></p><h2 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a> 创建阶段</h2><p>执行时机：组件创建时（页面加载时）</p><p>执行顺序：</p><p><img src="'+h+'" alt=""></p><table><thead><tr><th>钩子 函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最先执行</td><td>1. 初始化 state 2. 创建 Ref 等</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染 UI</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成 DOM 渲染）后</td><td>1. 发送网络请求 2.DOM 操作</td></tr></tbody></table><h2 id="更新阶段" tabindex="-1"><a class="header-anchor" href="#更新阶段" aria-hidden="true">#</a> 更新阶段</h2><ul><li>执行时机：1. setState() 2. 组件接收到新的 props、 3. forceUpdate() - 不常用</li><li>说明：以上三者任意一种变化，组件就会重新渲染</li><li>执行顺序</li></ul><p><img src="'+p+'" alt=""></p><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染 UI（与 挂载阶段 是同一个 render）（<strong>注意： 不能调用 setState()</strong> ）</td></tr><tr><td>componentDidUpdate</td><td>数据更新-组件更新</td><td>DOM 操作，可以获取到更新后的 DOM 内容，<strong>不要调用 setState</strong></td></tr></tbody></table><p><strong>总结：</strong></p><ol><li>触发组件更新的方式（常用），两种： <ol><li>props 值的改变</li><li>setState()改变 state</li></ol></li><li>更新阶段触发的钩子函数，有两个 <ol><li>render</li><li>componentDidUpdate</li></ol></li></ol><p><strong>注意：</strong></p><ol><li>不论 DOM 中有没有使用数据，钩子函数都会被触发。（与 vue 不同）</li><li>react 中的更新，指的是数据更新，而非视图更新。（与 vue 不同）</li></ol><h2 id="卸载阶段" tabindex="-1"><a class="header-anchor" href="#卸载阶段" aria-hidden="true">#</a> 卸载阶段</h2><ul><li>执行时机：组件从页面中消失</li></ul><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentWillUnmount</td><td>组件卸载（从页面中消失）</td><td>执行清理工作（比如：清理定时器等）</td></tr></tbody></table><h1 id="todo-案例优化" tabindex="-1"><a class="header-anchor" href="#todo-案例优化" aria-hidden="true">#</a> todo 案例优化</h1><ol><li><p>组件拆分</p></li><li><p>渲染任务列表</p></li><li><p>更新数据-设置选中状态、处理样式</p></li><li><p>删除一条数据功能</p></li><li><p>Footer 点谁谁有边框</p></li><li><p>Footer 点击切换数据</p></li><li><p>Footer 清空数据</p></li><li><p>剩余任务的功能</p></li><li><p>Header 改造为受控组件</p></li><li><p>回车新增功能</p><ol><li>ESC 取消输入内容</li><li>新增空，清空输入框</li><li>数据不能为空，提示用户</li></ol></li><li><p>本地缓存数据</p><ol><li>缓存 list</li><li>缓存 type</li></ol></li><li><p>全选功能</p><ol><li>小选影响全选</li><li>全选影响小选</li></ol></li></ol><p>day04 结束</p>',20);function x(y,D){const l=r("ExternalLinkIcon");return a(),d("div",null,[_,t("ul",null,[u,b,m,t("li",null,[t("a",f,[o("http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"),n(l)])])]),g])}const j=i(c,[["render",x],["__file","04-组件生命周期.html.vue"]]);export{j as default};
