import{_ as e,r as p,o,c as l,a as n,b as s,d as t,e as c}from"./app.ebc37b2a.js";const i="/assets/单页vs多页-16297300974361.6b889d63.png",u="/assets/路由是一套规则1-16297300974362.0fda38ab.png",r="/assets/路由是一套规则2-16297300974363.1bb5a5c5.png",d={},k=n("h1",{id:"单页应用程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单页应用程序","aria-hidden":"true"},"#"),s(" 单页应用程序")],-1),v=n("ul",null,[n("li",null,[s("SPA： "),n("code",null,"Single Page Application"),s(" 单页面应用程序，整个应用中只有一个页面（index.html）")]),n("li",null,[s("MPA : "),n("code",null,"Multiple Page Application"),s("多页面应用程序，整个应用中有很多个页面（*.html）")])],-1),m={href:"https://baike.baidu.com/item/SPA/17536313?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},h={href:"https://music.163.com/",target:"_blank",rel:"noopener noreferrer"},g=c('<h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h2><ol><li>加快页面响应速度，降低了对服务器的压力 <ul><li>传统的多页面应用程序，每次请求服务器返回的都是一整个完整的页面</li><li>单页面应用程序只有第一次会加载完整的页面，以后每次请求仅仅获取必要的数据</li></ul></li><li>更好的用户体验，运行更加流畅</li></ol><p><img src="'+i+'" alt="单页vs多页"></p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p><strong>不利于 SEO</strong> 搜索引擎优化</p><ul><li>因为 爬虫 只爬取 HTML 页面中的文本内容，不会执行 JS 代码</li><li>可以通过 SSR（服务端渲染 Server Side Rendering）来解决 SEO 问题 <ul><li>解释：先在服务器端把内容渲染出来，然后，返回给浏览器的就是纯 HTML 内容了</li></ul></li><li>页面静态化，比如，对于一个电商应用可以为每一个商品生产一个静态的 HTML 页面，静态 HTML 页面中是带有文字内容的，所以，有利于 SEO 的</li></ul><hr><h1 id="react-路由" tabindex="-1"><a class="header-anchor" href="#react-路由" aria-hidden="true">#</a> React 路由</h1><ul><li>React 路由介绍</li><li>路由的基本使用</li><li>路由的执行过程</li><li>路由的常用操作</li></ul><h2 id="react-路由介绍" tabindex="-1"><a class="header-anchor" href="#react-路由介绍" aria-hidden="true">#</a> React 路由介绍</h2><p>现代的前端应用大多都是 SPA（单页应用程序），也就是只有一个 HTML 页面的应用程序。因为它的用户体验更好、对服务器的压力更小，所以更受欢迎。为了<strong>有效的使用单个页面来管理原来多页面的功能，前端路由应运而生</strong>。前端路由的功能：让用户从一个视图（页面）导航到另一个视图（页面）</p><ul><li>前端路由是一套<strong>映射规则</strong>，在 React 中，是 <em>URL 路径</em> 与 <em>组件</em> 的对应关系</li><li>使用 React 路由简单来说就是：配置路径和组件（配对）</li></ul><p><img src="'+u+'" alt="路由是一套规则1"><img src="'+r+`" alt="路由是一套规则2"></p><h2 id="模拟路由的实现" tabindex="-1"><a class="header-anchor" href="#模拟路由的实现" aria-hidden="true">#</a> 模拟路由的实现</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;./pages/Home&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> My <span class="token keyword">from</span> <span class="token string">&#39;./pages/My&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Friend <span class="token keyword">from</span> <span class="token string">&#39;./pages/Friend&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">currentHash</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// hashchange: 锚点值（hash）改变就会触发</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注册事件， 注意hashchange不要写成驼峰式，这是原生JS的语法</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hash值变了&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">currentHash</span><span class="token operator">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> currentHash <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">app组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/my<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我的音乐</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/friend<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我的朋友</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>currentHash <span class="token operator">===</span> <span class="token string">&#39;/home&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Home</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token punctuation">{</span>currentHash <span class="token operator">===</span> <span class="token string">&#39;/my&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">My</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">My</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token punctuation">{</span>currentHash <span class="token operator">===</span> <span class="token string">&#39;/friend&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Friend</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Friend</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-路由复习" tabindex="-1"><a class="header-anchor" href="#vue-路由复习" aria-hidden="true">#</a> Vue 路由复习</h2><ol><li><p>下包 vue-router、导入 VueRouter</p></li><li><p>配置规则对象数组：</p><ol><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[{
   path: &quot;/home&quot;，
   component: Home，
   children: [
    path: &quot;index&quot;
   ]
}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>实例化路由：new VueRouter()</p></li><li><p>设置挂载点 router-view</p></li><li><p>跳转路径：router-link</p></li></ol><h1 id="路由基本使用" tabindex="-1"><a class="header-anchor" href="#路由基本使用" aria-hidden="true">#</a> 路由基本使用</h1><p>官网：https://reactrouter.com/</p><h2 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤</h2><ul><li>安装</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn add react<span class="token operator">-</span>router<span class="token operator">-</span>dom@<span class="token number">5.3</span>
npm i react<span class="token operator">-</span>router<span class="token operator">-</span>dom@<span class="token number">5.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>react-router-dom</code>这个包提供了三个核心的组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用<code>HashRouter</code>包裹整个应用，一个项目中只会有一个 Router</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>HashRouter<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span><span class="token comment">// … 省略页面内容&lt;/div&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>HashRouter<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 Link 指定导航链接</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/first&quot;</span><span class="token operator">&gt;</span>页面一<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/two&quot;</span><span class="token operator">&gt;</span>页面二<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>Route</code>指定路由规则</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在哪里写的Route,最终匹配到的组件就会渲染到这</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/first&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>First<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>💥 使用 Router 包住整个应用，一般项目中只会有一个 Router。</li><li>💥 Route 写在 Router 之内，不能写在 Router 之外。</li></ol><h2 id="router-详细说明" tabindex="-1"><a class="header-anchor" href="#router-详细说明" aria-hidden="true">#</a> Router 详细说明</h2><ul><li>Router 组件：包裹整个应用，一个 React 应用只需要使用一次</li><li>两种常用 Router：<code>HashRouter</code> 和 <code>BrowserRouter</code></li><li>HashRouter：使用 URL 的哈希值实现（http://localhost:3000/#/first） <ul><li>原理：监听 window 的 <code>hashchange</code> 事件来实现的</li></ul></li><li>（推荐）BrowserRouter：使用 H5 的 history API 实现（http://localhost:3000/first） <ul><li>原理：监听 window 的 <code>popstate</code> 事件来实现的</li></ul></li></ul><p>👍 最佳实践： 使用 as 语法将重命名为 Router</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// import { BrowserRouter as Router, Route, Link } from &#39;react-router-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="link-与-navlink" tabindex="-1"><a class="header-anchor" href="#link-与-navlink" aria-hidden="true">#</a> Link 与 NavLink</h2><p><code>Link</code>组件最终会渲染成 a 标签，用于指定路由导航</p><ul><li>to 属性，将来会渲染成 a 标签的 href 属性</li><li><code>Link</code>组件无法实现导航的高亮效果</li></ul><p><code>NavLink</code>组件，一个更特殊的<code>Link</code>组件，可以用用于指定当前导航高亮</p><ul><li>to 属性，用于指定地址，会渲染成 a 标签的 href 属性</li><li>activeClassName: 用于指定高亮的类名，默认<code>active</code></li><li>exact: 精确匹配，表示必须精确匹配类名才生效</li></ul><p>注意：</p><ol><li>👍 推荐： 使用 LInk NavLink 替代 a 标签. <ol><li><code>Link</code> <code>NavLink</code> 会根据路由模式，自动判断是否加#。</li><li>a 标签不会。</li></ol></li></ol><h2 id="route" tabindex="-1"><a class="header-anchor" href="#route" aria-hidden="true">#</a> Route</h2><ul><li><p>path 的说明</p><ul><li><p>如果 path 的路径匹配上了，那么就可以对应的组件就会被 render</p></li><li><p>如果 path 没有匹配上，那么会 render null</p></li><li><p><strong>默认情况下，path=&quot;/&quot;</strong> 能够匹配任意/开始的路径</p></li><li><p><strong>如果没有指定 path</strong>，那么一定会被渲染</p></li></ul></li><li><p>exact 的说明， exact 表示精确匹配某个路径</p><p><code>&lt;Route exact path=&quot;/login&quot; component={Login}/&gt;</code></p></li></ul><h2 id="switch-与-404" tabindex="-1"><a class="header-anchor" href="#switch-与-404" aria-hidden="true">#</a> Switch 与 404</h2><ul><li><p>通常，👍 我们会把<code>Route</code>包裹在一个<code>Switch</code>组件中。</p></li><li><p>在<code>Switch</code>组件中，匹配到第一个匹配的组件，停止向下匹配。</p></li><li><p><code>Route</code>不写<code>path</code>，配合<code>Switch</code> 实现 404 页面的提示</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/user&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
   <span class="token comment">//&lt;Route&gt;不写\`path\`，配合\`&lt;Switch&gt;\` 实现404页面的提示</span>
  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Redirect path=&#39;/&#39; to=&#39;/home&#39;} /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="嵌套路由的配置" tabindex="-1"><a class="header-anchor" href="#嵌套路由的配置" aria-hidden="true">#</a> 嵌套路由的配置</h1><ul><li><p>在 React 中，配置嵌套路由非常的简单，因为<code>Route</code>就是一个组件，可以在任意想配置的地方进行配置</p></li><li><p>但是配置嵌套路由的时候，需要对路径进行处理，必须要先匹配到父级路由，才能匹配到子路由</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过/home可以匹配Home父组件  再通过/list匹配子组件</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home/list&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>子组件中不需要再设置<code>Router</code>组件</li><li>子组件中有多个路由 ，👍 推荐使用<code>Switch</code> 组件包裹所有的<code>Router</code> 组件</li></ul><h1 id="编程式导航" tabindex="-1"><a class="header-anchor" href="#编程式导航" aria-hidden="true">#</a> 编程式导航</h1><ul><li>场景：点击登录按钮，登录成功后，通过代码跳转到后台首页，如何实现？</li><li>编程式导航：通过 JS 代码来实现页面跳转</li><li>history 是 React 路由提供的，用于获取浏览器历史记录的相关信息。通过 props.history 获取。</li><li>push(path)：跳转到某个页面，参数 path 表示要跳转的路径</li><li>go(n)： 前进或后退到某个页面，参数 n 表示前进或后退页面数量（比如：-1 表示后退到上一页）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">handleLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>省略其他代码<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>💥 只有被<code>&lt;Route component={组件名}&gt;</code> 设置过路径的组件，props 上才有 history。</li><li>💥<code>HashRoute</code> 与<code>BroswerRoute</code> 两种模式下都具有 history</li></ol><p>总结：</p><ol><li><code>history</code> 属性 是 <code>React 路由</code> 提供的，通过<code>props.history</code> 获取。</li><li><code>history.push(&#39;/路径名&#39;)</code> ：表示跳转到指定的路径。</li><li><code>history.go(n)</code> 表示前进或后退。参数 n 表示前进或后退页面数量（比如：-1 表示后退到上一页）</li></ol><h1 id="动态路由与路由参数获取" tabindex="-1"><a class="header-anchor" href="#动态路由与路由参数获取" aria-hidden="true">#</a> 动态路由与路由参数获取</h1><ul><li>可以使用<code>:id</code>的方式来配置动态的路由参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以匹配 /users/1  /users/2  /users/xxx</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/users/:id&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Users<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在组件中，通过<code>props</code>可以接收到路由的参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66);function b(x,R){const a=p("ExternalLinkIcon");return o(),l("div",null,[k,v,n("p",null,[n("a",m,[s("SPA "),t(a)]),n("a",h,[s("网易云音乐"),t(a)])]),g])}const w=e(d,[["render",b],["__file","06-react路由.html.vue"]]);export{w as default};
